import { fetcher } from "backend-feature/utils/fetcher";
import type { NextPage } from "next";
import Head from "next/head";
import useSWR from "swr";
import styles from "../styles/Home.module.css";
import { generateGetMethodWithQueries } from "backend-feature/utils/generateGetMethodWithQueries";

import { CakeStatResponse } from "./api/getSelfCakeStats";
import { EarningTable } from "components/EarningTable";
import { SearchBar } from "components/SearchBar";
import { useState } from "react";
import axios from "axios";
import { Dropdown } from "components/Dropdown";
import { DexDropdown, dexOptions } from "components/DexDropdown";
import { Option } from "react-dropdown";
import { LoadingSpinner } from "components/LoadingSpinner";

const Home: NextPage = () => {
  const [dexOption, setDexOption] = useState<Option>(dexOptions[0]);
  const [addressToSearchValue, setAddressToSearchValue] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [cakeStatResponse, setCakeStatResponse] =
    useState<CakeStatResponse>(null);
  if (true) {
    return (
      <div className="flex m-auto px-2 py-4 justify-around">
        <div
          style={{
            width: 36,
          }}
        >
          <LoadingSpinner />
        </div>
        <span>
          Let&lsquo;s see where all the money goes down the rabit hole...{" "}
        </span>
        <div
          style={{
            width: 36,
          }}
        >
          <LoadingSpinner />
        </div>
      </div>
    );
    return <div className="m-auto px-2 py-4 bg-red-500">loading...</div>;
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>üßê Defi-crunching</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className=" p-6">
        <form
          onSubmit={async (e) => {
            e.preventDefault();
            setIsLoading(true);
            const response = await axios.get(
              generateGetMethodWithQueries("/api/getSelfCakeStats", {
                address: addressToSearchValue,
              })
            );
            if (response.status === 200) {
              setCakeStatResponse(response.data);
              console.log(
                "üöÄ ~ file: index.tsx ~ line 46 ~ onSubmit={ ~ response.data",
                response.data
              );
            }
            setIsLoading(false);
          }}
        >
          <div className="flex flex-row m-auto">
            <DexDropdown className="w-64" onDexSelectChange={setDexOption} />
            <div
              style={{
                width: 546,
              }}
            >
              <SearchBar
                value={addressToSearchValue}
                onChange={setAddressToSearchValue}
                placeholder="An address to start with..."
              />
            </div>
          </div>

          <button type="submit" className="hidden" />
        </form>
        {!!cakeStatResponse &&
          cakeStatResponse.earningTableData.map((el) => {
            return (
              <EarningTable
                key={el.poolName}
                outputResponses={el.outputResponses}
              />
            );
          })}
      </div>
    </div>
  );
};

export default Home;
